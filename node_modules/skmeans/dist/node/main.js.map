{"version":3,"sources":["../../main.js"],"names":["Distance","require","ClusterInit","eudist","mandist","absdist","dist","kmrand","kmpp","MAX","init","len","val","v","i","test","point","fndist","multi","Array","isArray","ks","centroids","k","length","min","Infinity","idx","j","Math","abs","centroid","skmeans","data","initial","maxit","old","idxs","conv","it","vlen","count","z","floor","random","sum","dif","vsum","vect","h","ksj","sumj","oldj","cj","module","exports"],"mappings":"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","sourcesContent":["/*jshint esversion: 6 */\r\n\r\nconst\r\n\tDistance = require(\"./distance.js\"),\r\n\tClusterInit = require(\"./kinit.js\"),\r\n\teudist = Distance.eudist,\r\n\tmandist = Distance.mandist,\r\n\tabsdist = Distance.dist,\r\n\tkmrand = ClusterInit.kmrand,\r\n\tkmpp = ClusterInit.kmpp;\r\n\r\nconst MAX = 10000;\r\n\r\n/**\r\n * Inits an array with values\r\n */\r\nfunction init(len,val,v) {\r\n\tv = v || [];\r\n\tfor(let i=0;i<len;i++) v[i] = val;\r\n\treturn v;\r\n}\r\n\r\nfunction test(point, fndist) {\r\n\tlet\r\n\t\tmulti = Array.isArray(point),\r\n\t\tks = this.centroids,\r\n\t\tk = ks.length;\r\n\r\n\t// For each value in data, find the nearest centroid\r\n\tlet min = Infinity, idx = 0;\r\n\tfor(let j=0;j<k;j++) {\r\n\t\t// Custom, Multidimensional or unidimensional\r\n\t\tlet dist =\tfndist? fndist(point,ks[j]) :\r\n\t\t\t\t\t\t\t\tmulti? eudist(point,ks[j]) :\r\n\t\t\t\t\t\t\t\tMath.abs(point-ks[j]);\r\n\r\n\t\tif(dist<=min) {\r\n\t\t\tmin = dist;\r\n\t\t\tidx = j;\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tidx, centroid:ks[idx]\r\n\t}\r\n}\r\n\r\nfunction skmeans(data,k,initial,maxit,fndist) {\r\n\tvar ks = [], old = [], idxs = [], dist = [];\r\n\tvar conv = false, it = maxit || MAX;\r\n\tvar len = data.length, vlen = data[0].length, multi = vlen>0;\r\n\tvar count = [];\r\n\r\n\tif(!initial) {\r\n\t\tlet idxs = {}, z=0;\r\n\t\twhile(ks.length<k) {\r\n\t\t\tlet idx = Math.floor(Math.random()*len);\r\n\t\t\tif(!idxs[idx]) {\r\n\t\t\t\tidxs[idx] = true;\r\n\t\t\t\tks[z++] = data[idx];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse if(initial==\"kmrand\") {\r\n\t\tks = kmrand(data,k);\r\n\t}\r\n\telse if(initial==\"kmpp\") {\r\n\t\tks = kmpp(data,k,fndist);\r\n\t}\r\n\telse {\r\n\t\tks = initial;\r\n\t}\r\n\r\n\tdo {\r\n\t\t// Reset k count\r\n\t\tinit(k,0,count);\r\n\r\n\t\t// For each value in data, find the nearest centroid\r\n\t\tfor(let i=0;i<len;i++) {\r\n\t\t\tlet min = Infinity, idx = 0;\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\t// Custom, Multidimensional or unidimensional\r\n\t\t\t\tvar dist =\tfndist ? fndist(data[i],ks[j]) :\r\n\t\t\t\t\t\t\t\t\t\tmulti? eudist(data[i],ks[j]) :\r\n\t\t\t\t\t\t\t\t\t\tMath.abs(data[i]-ks[j]);\r\n\r\n\t\t\t\tif(dist<=min) {\r\n\t\t\t\t\tmin = dist;\r\n\t\t\t\t\tidx = j;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tidxs[i] = idx;\t// Index of the selected centroid for that value\r\n\t\t\tcount[idx]++;\t\t// Number of values for this centroid\r\n\t\t}\r\n\r\n\t\t// Recalculate centroids\r\n\t\tvar sum = [], old = [], dif = 0;\r\n\t\tif(multi) {\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\tsum[j] = init(vlen,0,sum[j]);\r\n\t\t\t\told[j] = ks[j];\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\tsum[j] = 0;\r\n\t\t\t\told[j] = ks[j];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If multidimensional\r\n\t\tif(multi) {\r\n\t\t\tfor(let j=0;j<k;j++) ks[j] = [];\r\n\r\n\t\t\t// Sum values and count for each centroid\r\n\t\t\tfor(let i=0;i<len;i++) {\r\n\t\t\t\tlet\tidx = idxs[i],\t\t// Centroid for that item\r\n\t\t\t\t\t\tvsum = sum[idx],\t// Sum values for this centroid\r\n\t\t\t\t\t\tvect = data[i];\t\t// Current vector\r\n\r\n\t\t\t\t// Accumulate value on the centroid for current vector\r\n\t\t\t\tfor(let h=0;h<vlen;h++) {\r\n\t\t\t\t\tvsum[h] += vect[h];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Calculate the average for each centroid\r\n\t\t\tconv = true;\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\tlet ksj = ks[j],\t\t// Current centroid\r\n\t\t\t\t\t\tsumj = sum[j],\t// Accumulated centroid values\r\n\t\t\t\t\t\toldj = old[j], \t// Old centroid value\r\n\t\t\t\t\t\tcj = count[j];\t// Number of elements for this centroid\r\n\r\n\t\t\t\t// New average\r\n\t\t\t\tfor(let h=0;h<vlen;h++) {\r\n\t\t\t\t\tksj[h] = (sumj[h])/(cj) || 0;\t// New centroid\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Find if centroids have moved\r\n\t\t\t\tif(conv) {\r\n\t\t\t\t\tfor(let h=0;h<vlen;h++) {\r\n\t\t\t\t\t\tif(oldj[h]!=ksj[h]) {\r\n\t\t\t\t\t\t\tconv = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If unidimensional\r\n\t\telse {\r\n\t\t\t// Sum values and count for each centroid\r\n\t\t\tfor(let i=0;i<len;i++) {\r\n\t\t\t\tlet idx = idxs[i];\r\n\t\t\t\tsum[idx] += data[i];\r\n\t\t\t}\r\n\t\t\t// Calculate the average for each centroid\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\tks[j] = sum[j]/count[j] || 0;\t// New centroid\r\n\t\t\t}\r\n\t\t\t// Find if centroids have moved\r\n\t\t\tconv = true;\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\tif(old[j]!=ks[j]) {\r\n\t\t\t\t\tconv = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconv = conv || (--it<=0);\r\n\t}while(!conv);\r\n\r\n\treturn {\r\n\t\tit : (maxit || MAX) - it,\r\n\t\tk : k,\r\n\t\tidxs : idxs,\r\n\t\tcentroids : ks,\r\n\t\ttest : test\r\n\t};\r\n}\r\n\r\nmodule.exports = skmeans;\r\n"],"file":"main.js"}